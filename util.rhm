#lang rhombus/static/and_meta

import:
  lib("racket/base.rkt"):
    rename:
      #{in-lines} as in_lines
  lib("racket/port.rkt")
  lib("racket/sequence.rkt"):
    rename:
      #{sequence-map} as map

export:
  call_with_input_string
  example_input

  in_lines

expr.macro 'call_with_input_string $s:
              $body':
  'port.#{call-with-input-string}($s, $body)'

defn.macro 'example_input($(name :: Identifier), [$s, ...])':
  'def $name: String.append($s, ...)'

fun in_lines(inp :: Port.Input) :~ Sequence:
  sequence.map(fun (s :~ ReadableString): s.to_string(), base.in_lines(inp))
