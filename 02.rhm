#lang rhombus/static

import:
  lib("racket/base.rkt")
  "advent_of_code.rhm" as aoc
  "util.rhm"

def lex_pat:
  base.pregexp("^\\s+|Game|\\d+|[:,]|;|red|green|blue")

fun make_string_pred(f):
  fun (s :: String):
    for values(r = #true):
      each i: 0..s.length()
      r && f(s[i])

def is_space = make_string_pred(Char.is_whitespace)
def is_number = make_string_pred(Char.is_numeric)

fun lex(input :: String, i :: NonnegInt = 0) :: List:
  def values(tok, tlen):
    match base.#{regexp-match}(lex_pat, input, i)
    | [tok :: ReadableString.to_string]: values(tok, tok.length())
    | v: values(v, 0)
  fun next(v):
    List.cons(v, lex(input, i + tlen))
  cond
  | !tok: []
  // delimiters
  | is_space(tok)
      || tok == "Game"
      || tok == ":"
      || tok == ",": lex(input, i + tlen)
  | is_number(tok): next(String.to_int(tok))
  | ~else: next(tok)

class Game(number :: NonnegInt, rounds :: List.of(Map)):
  // report the maximum possible cubes in a game
  method max_cubes():
    def values(r, g, b):
      for values(r = 0, g = 0, b = 0):
        each a_round: rounds
        values(math.max(r, a_round.get("red", 0)),
               math.max(g, a_round.get("green", 0)),
               math.max(b, a_round.get("blue", 0)))
    {"red": r, "green": g, "blue": b}

  method power():
    def {"red": r, "green": g, "blue": b} = max_cubes()
    r * g * b

  method is_possible(r0 :: NonnegInt,
                     g0 :: NonnegInt,
                     b0 :: NonnegInt) :: Boolean:
    def {"red": r1, "green": g1, "blue": b1} = max_cubes()
    r0 >= r1 && g0 >= g1 && b0 >= b1

fun parse_line(input :: String) :: Game:
  fun parse_rounds(tokens, counts :~ Map):
    match tokens
    | []: [counts]
    | [";", &rest]:
        List.cons(counts, parse_rounds(rest, {}))
    | [count, color, &rest]:
        parse_rounds(rest, counts ++ {color: count})
  match lex(input)
  | [game, &rest]: Game(game, parse_rounds(rest, {}))

@util.example_input(test_input){
Game 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green
Game 2: 1 blue, 2 green; 3 green, 4 blue, 1 red; 1 green, 1 blue
Game 3: 8 green, 6 blue, 20 red; 5 blue, 4 red, 13 green; 5 green, 1 red
Game 4: 1 green, 3 red, 6 blue; 3 green, 6 red; 3 green, 15 blue, 14 red
Game 5: 6 red, 1 blue, 3 green; 2 blue, 1 red, 2 green
}

check:
  def input:
    "Game 4: 1 green, 3 red, 6 blue; 3 green, 6 red; 3 green, 15 blue, 14 red"
  parse_line(input)
  ~is Game(4, [{"red": 3, "green": 1, "blue": 6},
               {"red": 6, "green": 3},
               {"red": 14, "green": 3, "blue": 15}])

check:
  Game(1, [{"red": 12, "green": 13, "blue": 14}]).is_possible(12, 13, 14)
  ~is #true

fun run1(input :: String):
  util.call_with_input_string(input):
    fun (inp :: Port.Input):
      for values(sum = 0):
        each a_line: util.in_lines(inp)
        def a_game = parse_line(a_line)
        keep_when a_game.is_possible(12,13,14)
        sum + a_game.number

check run1(test_input) ~is 8

module part1:
  run1(aoc.fetch_input(aoc.find_session(), 2023, 2))

check:
  def input:
    "Game 4: 1 green, 3 red, 6 blue; 3 green, 6 red; 3 green, 15 blue, 14 red"
  def g = parse_line(input)
  g.power()
  ~is 630

fun run2(input :: String):
  util.call_with_input_string(input):
    fun (inp :: Port.Input):
      for values(sum = 0):
        each a_line: util.in_lines(inp)
        sum + parse_line(a_line).power()

check:
  run2(test_input) ~is 2286

module part2:
  run2(aoc.fetch_input(aoc.find_session(), 2023, 2))